[gd_scene load_steps=11 format=3 uid="uid://cqfiabveut417"]

[ext_resource type="PackedScene" uid="uid://cro1j85cxg7hc" path="res://paper.tscn" id="1_nmwkd"]
[ext_resource type="Script" path="res://draw.gd" id="3_tixgq"]
[ext_resource type="Script" path="res://root_node_adder.gd" id="4_kiaks"]
[ext_resource type="Script" path="res://debug_log.gd" id="6_7cisa"]

[sub_resource type="Environment" id="Environment_2lhev"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_tyiia"]
albedo_color = Color(0.253843, 0.253843, 0.253843, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_3cwpg"]
material = SubResource("StandardMaterial3D_tyiia")

[sub_resource type="WorldBoundaryShape3D" id="WorldBoundaryShape3D_gta2d"]

[sub_resource type="GDScript" id="GDScript_68wx6"]
script/source = "extends CharacterBody3D

@export var sensitivity: float = 1.0

@onready var camera: Camera3D = $Camera3D

const SPEED = 5.0
const JUMP_VELOCITY = 4.5

func _ready() -> void:
	Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN

func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouseMotion:
		rotate_y(-event.relative.x * sensitivity)
		camera.rotate_x(-event.relative.y * sensitivity)
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-90), deg_to_rad(90))


func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta

	# Handle jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir := Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\")
	var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_y5p47"]

[node name="Main" type="Node3D"]

[node name="Paper" parent="." instance=ExtResource("1_nmwkd")]
transform = Transform3D(1, 0, 0, 0, 0.538712, -0.84249, 0, 0.84249, 0.538712, 0, 1.23284, -2.56206)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_2lhev")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.325073, 0.945689, 0, -0.945689, 0.325073, 0, 4.36895, 0)
light_energy = 7.67

[node name="StaticBody3D" type="StaticBody3D" parent="."]

[node name="MeshInstance3D" type="MeshInstance3D" parent="StaticBody3D"]
transform = Transform3D(6.88953, 0, 0, 0, 6.88953, 0, 0, 0, 6.88953, 0, 0, 0)
mesh = SubResource("PlaneMesh_3cwpg")
skeleton = NodePath("../..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
shape = SubResource("WorldBoundaryShape3D_gta2d")

[node name="DebugLog" type="Label3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.93188, 1.8194, -2.89863)
text = "test"
script = ExtResource("6_7cisa")

[node name="CharacterBody3D" type="CharacterBody3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.25542, 0)
script = SubResource("GDScript_68wx6")
sensitivity = 0.005

[node name="CollisionShape3D" type="CollisionShape3D" parent="CharacterBody3D"]
shape = SubResource("CapsuleShape3D_y5p47")

[node name="Camera3D" type="Camera3D" parent="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.437871, 0)

[node name="Node3D" type="Node3D" parent="CharacterBody3D/Camera3D" node_paths=PackedStringArray("ray_cast_3D")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.00245321, 0)
script = ExtResource("3_tixgq")
ray_cast_3D = NodePath("RayCast3D")

[node name="RayCast3D" type="RayCast3D" parent="CharacterBody3D/Camera3D/Node3D"]
target_position = Vector3(0, 0, -3)

[node name="RootNodeAdder" type="Node" parent="."]
script = ExtResource("4_kiaks")

[connection signal="add_node_to_root" from="CharacterBody3D/Camera3D/Node3D" to="RootNodeAdder" method="_on_node_3d_add_node_to_root"]
